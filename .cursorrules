# Auspex Medix LLC - Cursor Rules

## Project Overview
This is a React TypeScript application for Auspex Medix LLC, built with Vite, shadcn/ui, and Tailwind CSS. The project focuses on medical technology solutions with a modern, accessible interface.

## Tech Stack
- **Framework**: React 18 with TypeScript
- **Build Tool**: Vite
- **Styling**: Tailwind CSS with shadcn/ui components
- **UI Components**: Radix UI primitives with shadcn/ui
- **Routing**: React Router DOM
- **State Management**: React Query (TanStack Query)
- **Forms**: React Hook Form with Zod validation
- **Icons**: Lucide React
- **Theming**: next-themes for dark/light mode

## Color Scheme & Design System

### CSS Variables (HSL Values)
**Light Mode:**
- `--background: 0 0% 100%` - Pure white background
- `--foreground: 222.2 84% 4.9%` - Very dark blue-gray text
- `--primary: 222.2 47.4% 11.2%` - Dark blue-gray primary
- `--primary-foreground: 210 40% 98%` - Near white on primary
- `--secondary: 210 40% 96.1%` - Light gray secondary
- `--muted: 210 40% 96.1%` - Light gray muted
- `--accent: 210 40% 96.1%` - Light gray accent
- `--border: 214.3 31.8% 91.4%` - Light gray borders
- `--destructive: 0 84.2% 60.2%` - Red for errors

**Dark Mode:**
- `--background: 222.2 84% 4.9%` - Very dark blue-gray
- `--foreground: 210 40% 98%` - Near white text
- `--primary: 210 40% 98%` - Light primary in dark mode
- `--secondary: 217.2 32.6% 17.5%` - Dark gray secondary
- `--muted: 217.2 32.6% 17.5%` - Dark gray muted

### Sidebar Colors
- `--sidebar-background: 0 0% 98%` (light) / `240 5.9% 10%` (dark)
- `--sidebar-primary: 240 5.9% 10%` (light) / `224.3 76.3% 48%` (dark)
- `--sidebar-ring: 217.2 91.2% 59.8%` - Blue accent

## Coding Standards

### File Structure
```
src/
├── components/          # Reusable UI components
│   ├── ui/             # shadcn/ui components
│   ├── Header.tsx      # Navigation header
│   ├── Hero.tsx        # Hero section
│   ├── Projects.tsx    # Projects showcase
│   ├── Services.tsx    # Services section
│   ├── About.tsx       # About section
│   ├── Contact.tsx     # Contact form
│   └── Footer.tsx      # Footer component
├── pages/              # Page components
├── hooks/              # Custom React hooks
├── lib/                # Utility functions
└── App.tsx             # Main app component
```

### Component Guidelines
1. **Use TypeScript**: All components must be strongly typed
2. **Functional Components**: Use function declarations with proper typing
3. **Props Interface**: Define interfaces for all component props
4. **shadcn/ui Components**: Prefer shadcn/ui components over custom UI
5. **Responsive Design**: Use Tailwind responsive classes (sm:, md:, lg:, xl:)

### Styling Guidelines
1. **Tailwind Classes**: Use Tailwind CSS utility classes
2. **Color Usage**: Use CSS custom properties via Tailwind config
   - `bg-background text-foreground` for main content
   - `bg-primary text-primary-foreground` for primary actions
   - `bg-secondary text-secondary-foreground` for secondary content
   - `bg-muted text-muted-foreground` for less important content
3. **Dark Mode**: Support both light and dark themes using `dark:` prefix
4. **Spacing**: Use consistent spacing scale (4, 8, 12, 16, 24, 32)
5. **Border Radius**: Use `--radius` variable (0.5rem default)

### Component Patterns
```typescript
interface ComponentProps {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export function Component({ title, description, children }: ComponentProps) {
  return (
    <div className="bg-background text-foreground p-6 rounded-lg border">
      <h2 className="text-2xl font-bold text-primary mb-4">{title}</h2>
      {description && (
        <p className="text-muted-foreground mb-6">{description}</p>
      )}
      {children}
    </div>
  );
}
```

### Form Patterns
- Use React Hook Form with Zod validation
- Implement proper error handling and validation
- Use shadcn/ui form components (Form, FormField, FormItem, etc.)

### State Management
- Use React Query for server state
- Use React hooks (useState, useEffect) for local state
- Implement proper loading and error states

### Accessibility
- Use semantic HTML elements
- Implement proper ARIA labels
- Ensure keyboard navigation
- Maintain color contrast ratios
- Support screen readers

### Import Organization
```typescript
// External libraries
import React from 'react';
import { useQuery } from '@tanstack/react-query';

// Internal utilities
import { cn } from '@/lib/utils';

// UI components
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

// Local components
import { Header } from '@/components/Header';
```

## Medical/Healthcare Context
- Prioritize accessibility and WCAG compliance
- Use clear, professional language
- Implement proper data validation for sensitive information
- Consider healthcare industry standards and regulations
- Use trusted, medical-appropriate color schemes and imagery

## Performance Guidelines
- Use React.lazy() for code splitting
- Implement proper image optimization
- Use Vite's built-in optimizations
- Minimize bundle size with tree shaking
- Implement proper caching strategies

## Best Practices
1. **Code Quality**: Use ESLint and TypeScript strict mode
2. **Testing**: Write unit tests for critical functionality
3. **Documentation**: Document complex components and functions
4. **Error Handling**: Implement comprehensive error boundaries
5. **Loading States**: Show appropriate loading indicators
6. **Responsive Design**: Ensure mobile-first responsive design
7. **SEO**: Implement proper meta tags and semantic HTML
8. **Security**: Sanitize user inputs and implement proper validation

## When Creating New Components
1. Create in appropriate directory (`/components` or `/pages`)
2. Use TypeScript with proper interface definitions
3. Implement both light and dark mode support
4. Follow the established color scheme
5. Add proper props documentation
6. Include responsive design considerations
7. Test across different screen sizes
8. Ensure accessibility compliance 